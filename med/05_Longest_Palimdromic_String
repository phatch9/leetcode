class Solution {
    // Check if low and high are within bounds
    static boolean checkPalindrome(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low) != s.charAt(high))
                return false;
            low++;
            high--;
        }
        return true;
    }
    // prints the longest palindrome substring
    // returns the length of the longest palindrome
    static String longestPalindrome(String s) {
        int n = s.length();
        
        // Condition: all substrings with length of 1 are true
        int maxLen = 1, start = 0;

        // initialize loop for start and end index
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
              
                // Check if the current substring is a palindrome
                if (checkPalindrome(s, i, j) && (j - i + 1) > maxLen) {
                    start = i;
                    maxLen = j - i + 1;
                }
            }
        }

        return s.substring(start, start + maxLen);
    }

    // Driver Code
    public static void main(String[] args) {
        String s = "babad";
        System.out.println(longestPalindrome(s));
    }

}